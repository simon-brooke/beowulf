(ns beowulf.io
  "Non-standard extensions to Lisp 1.5 to read and write to the filesystem.
   
   Lisp 1.5 had only `READ`, which read one S-Expression at a time, and 
   various forms of `PRIN*` functions, which printed to the line printer. 
   There was also `PUNCH`, which wrote to a card punch. It does not seem 
   that there was any concept of an interactive terminal.
   
   See Appendix E, `OVERLORD - THE MONITOR`, and Appendix F, `LISP INPUT
   AND OUTPUT`.
   
   For our purposes, to save the current state of the Lisp system it should
   be sufficient to print the current contents of the oblist to file; and to
   restore a previous state from file, to overwrite the contents of the 
   oblist with data from that file.
   
   Hence functions SYSOUT and SYSIN, which do just that."
  (:require [beowulf.cons-cell :refer [pretty-print]]
            [beowulf.oblist :refer [*options* oblist]]
            [beowulf.read :refer [READ]]
            [clojure.string :refer [ends-with?]]
            [java-time.api :refer [local-date local-date-time]]))

(defn- full-path 
  [fp]
  (str
   (if (:filepath *options*)
     (str (:filepath *options*) (java.io.File/separator))
     "")
   (if (and (string? fp)
            (> (count fp) 0)
            (not= fp "NIL"))
     fp
     (str "Sysout-" (local-date)))
   (if (ends-with? fp ".lsp")
     ""
     ".lsp")))

(defn SYSOUT
  "Dump the current content of the object list to file. If no `filepath` is
   specified, a file name will be constructed of the symbol `Sysout` and 
   the current date. File paths will be considered relative to the filepath
   set when starting Lisp."
  ([]
   (SYSOUT nil))
  ([filepath]
   (spit (full-path (str filepath))
         (with-out-str
           (println (apply str (repeat 79 ";")))
           (println (format ";; Beowulf %s Sysout file generated at %s"
                            (or (System/getProperty "beowulf.version") "")
                            (local-date-time)))
           (when (System/getenv "USER")
             (println (format ";; generated by %s" (System/getenv "USER"))))
           (println (apply str (repeat 79 ";")))
           (println)
           (pretty-print @oblist)))))

(defn SYSIN
  "Read the contents of the file at this `filepath` into the object list. 
   
   If the file is not a valid Beowulf sysout file, this will probably 
   corrupt the system, you have been warned. File paths will be considered 
   relative to the filepath set when starting Lisp.
   
   **NOTE THAT** if the provided `filepath` does not end with `.lsp` (which,
   if you're writing it from the Lisp REPL it won't), the extension `.lsp`
   will be appended."
  [filepath]
  (let [fp (full-path (str filepath))
        content (try (READ (slurp fp))
                     (catch Throwable any
                       (throw (ex-info "Could not read from sysout"
                                       {:context "SYSIN"
                                        :filepath fp}
                                       any))))]
    (swap! oblist #(when (or % (seq content)) content))))

